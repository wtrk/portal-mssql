<link href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" rel="stylesheet">
<style>
    .handsontable tbody th,
    .handsontable thead th,
    .handsontable tbody th.ht__active_highlight,
    .handsontable thead th.ht__active_highlight {
        background-color: #696969;
        color: #fff;
    }
    .handsontable.listbox td, .handsontable.listbox th{
        white-space:normal !important;
    }
    #text-error {
        color: #ff4c42
    }
</style>
<div class="row mb-3">
    <div class="col-12">
        <div class="float-right">
            <a class="btn btn-primary ml-auto" href="javascript:;" id="downloadCsv"><i
                    class="align-middle mr-2 fas fa-fw fa-file-excel"></i> Export Excel Template</a>
        </div>
    </div>
</div>
<div class="row mb-5">
    <div class="col-12">
        <div class="d-flex align-items-stretch bd-highlight" style="background:#f1f1f1;">
            <div class="p-2 flex-fill bd-highlight">
                <table class="table mb-0" id="datatables-reponsive">
                    <thead>
                        <tr>
                            <th scope="col">Policy Id</th>
                            <th scope="col">LOB</th>
                            <th scope="col">Supplier</th>
                            <th scope="col">COR</th>
                            <th scope="col">Policy holder</th>
                            <th scope="col">Currency</th>
                            <th scope="col">Eff date</th>
                            <th scope="col">Exp Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @each(policy in policies)
                        <tr>
                            <td>{{policy.master_policy_clover_id}}</td>
                            <td>{{policy.lob}}</td>
                            <td>{{policy.supplier}}</td>
                            <td>{{policy.cor}}</td>
                            <td>{{policy.policyholder}}</td>
                            <td>{{policy.currency}}</td>
                            <td class="dateFormat">{{policy.effective_date}}</td>
                            <td class="dateFormat">{{policy.effective_date}}</td>
                        </tr>
                        @endeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row mb-3" id="handsOnTableCont">
    <div class="col-12">
        <div class="scrollHotContainer" style="height:auto;overflow-x:hidden;">
            <div id="hotContainer"></div>
        </div>
    </div>

</div>
<!-- Modal -->
<div class="modal fade" id="proceedConfirmation" tabindex="-1" role="dialog" aria-labelledby="proceedConfirmationLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content step1Modal">
            <div class="modal-header justify-content-center">
                <div class='spinner-border text-primary justify-content-center'><span class='sr-only'>Loading...</span>
                </div>
                <h5 class="modal-title d-none" id="proceedConfirmationLabel">Before proceeding to STEP 2, it is
                    recomended to
                    fix the invalid entries</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-footer d-none">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">FixThem</button>
                <button type="button" class="btn btn-primary" id="proceedToStep2">Proceed to Step 2</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
{{ script('assets/js/hot-functions') }}


<script>
    var rowMetaData=null, relationValue=null, nationalityValue=null, ageValue=null, uaeVisaIssuanceValue=null, memberTypeValue=null, gdrfaValue=null, entityTypeValue=null,emptyRow=true
    let addHealthTempsData={{{ toJSON(addHealthTempsData) }}} //Used in validation (hot-functions.js)
    $(document).ready(function() {
        $("#datatables-reponsive").DataTable({
            "scrollX": true
        });
        var  dataToInsert={{{ toJSON(dataToInsert) }}},
        contact={{{ toJSON(contact) }}},
        categories={{{ toJSON(categories) }}},
        categoriesDB={{{ toJSON(categoriesDB) }}},
        catBasedOnLimit={{{ toJSON(catBasedOnLimit) }}},
        client_contact_id={{{ toJSON(client_contact_id) }}},
        nationalities={{{ toJSON(nationalities) }}},
        companyName={{{ toJSON(companyName) }}},
        emirates={{{ toJSON(emirates) }}},
        memberTypes={{{ toJSON(memberTypes) }}},
        entityTypes={{{ toJSON(entityTypes) }}},
        establishmentIds={{{ toJSON(establishmentIds) }}},
        residentialLocations={{{ toJSON(residentialLocations) }}},
        workLocations={{{ toJSON(workLocations) }}},
        employeesSalaryBrackets={{{ toJSON(employeesSalaryBrackets) }}},
        residentialLocations={{{ toJSON(residentialLocations) }}},
        master_account={{{ toJSON(master_account) }}},
        cor={{{ toJSON(cor) }}},
        webReqId={{{ webReqId }}},
        policies={{{ toJSON(policies) }}}
        var errorMsg=[]
        let validLimits=""
        //Validations done: dropdown, notEmpty, email, minimum length 2, if filled min length
        if(dataToInsert.DOB){
            dataToInsert.DOB=moment(dataToInsert.DOB,"MMM DD YYYY hh:mm a").format("DD/MM/YYYY")
        }
        var distinctNumbers=function(value,callback){
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                    var distinctNumber=distinctNumberFunction(value)
                    if(distinctNumber.validation==true){
                        callback(true)
                        $("#text-error").html("")
                    }else{
                        callback(false)
                        $("#text-error").html("The selected data field "+distinctNumber.message)
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        
        var gdrfaFileNumber=function(value,callback){
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                    var validIdNum=validIdNumFunction(value,16,3)
                    var notEmpty=notEmptyfunction(value)
                    if(nationalityValue!="United Arab Emirates"){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        if(notEmpty.validation==true){
                            callback(false)
                            $("#text-error").html("You Should keep this field empty if you are emirati")
                        }else{
                            callback(true)
                            $("#text-error").html("")
                        }
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var nationalIdValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                var validIdNum=validIdNumFunction(value,10,3)
                    if(notEmpty.validation==true){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        if(nationalityValue=="Jordan"){
                            callback(false)
                            $("#text-error").html("<p>The selected data field "+notEmpty.message+"</p>")
                        }else{
                            callback(true)
                            $("#text-error").html("")
                        }
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var saudiIdValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                var validIdNum=validIdNumFunction(value,10,3)
                    if(notEmpty.validation==true){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        if(nationalityValue=="Kingdom Of Saudi Arabia"){
                            callback(false)
                            $("#text-error").html("The selected data field "+notEmpty.message)
                        }else{
                            callback(true)
                            $("#text-error").html("")
                        }
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var iqamaIdValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                var validIdNum=validIdNumFunction(value,10,3)
                    if(notEmpty.validation==true){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        if(nationalityValue!="Kingdom Of Saudi Arabia"){
                            callback(false)
                            $("#text-error").html("The selected data field "+notEmpty.message)
                        }else{
                            callback(true)
                            $("#text-error").html("")
                        }
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var iqamaDateValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                const timestampFromValue=Date.parse(value);
                var validateDate=validDatefunction(timestampFromValue)
                    if(notEmpty.validation==true){
                        if(validateDate.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("<p>The selected data field "+validateDate.message+"</p>")
                        }
                    }else{
                        if(nationalityValue=="Kingdom Of Saudi Arabia"){
                            callback(false)
                            $("#text-error").html("The selected data field "+notEmpty.message)
                        }else{
                            callback(true)
                            $("#text-error").html("")
                        }
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var kIdValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                var validIdNum=validIdNumFunction(value,12,3)
                    if(notEmpty.validation==true){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        callback(false)
                        $("#text-error").html("The selected data field "+notEmpty.message)
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var qIdValidation= function (value, callback) {
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                var notEmpty=notEmptyfunction(value)
                var validIdNum=validIdNumFunction(value,11,3)
                    if(notEmpty.validation==true){
                        if(validIdNum.validation==true){
                            callback(true)
                            $("#text-error").html("")
                        }else{
                            callback(false)
                            $("#text-error").html("The selected data field "+validIdNum.message)
                        }
                    }else{
                        callback(false)
                        $("#text-error").html("The selected data field "+notEmpty.message)
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        var statusValidation= function(value, callback){
            if(emptyRow){
                callback(true)
                $("#text-error").html("")
            }else{
                if(value){
                    if(value!="2= MARRIED" && relationValue=="2= SPOUSE"){
                        callback(false)
                        $("#text-error").html("Spouse can only be married")
                    }else if(value!="1= SINGLE" && relationValue=="3= CHILD"){
                        callback(false)
                        $("#text-error").html("Child can only be single")
                    }else{
                        callback(true)
                        $("#text-error").html("")
                    }
                }else{
                    callback(false)
                    $("#text-error").html("This field is mandatory")
                }
            }
        }
        cor = cor.toUpperCase()
        //var invalidCount
        let colHeaderFromCOR=[
            "Company Name",
            "Shop or Site or Department",
            "Employee Staff ID",
            "First Name",
            "Second Name",
            "Family Name",
            "Relation",
            "DOB",
            "Gender",
            "Nationality",
            "Marital Status",
            "Cost Sharing",
            "Position",
            "Grade",
            "Mobile No",
            "E-mail"];
        let columnsFromCOR=[
           {data: "Company Name", type: 'autocomplete', source: companyName ,allowInvalid: true},
           {data: "Shop or Site or Department", type: "text", validator:notEmpty ,allowInvalid: true},
           {data: "Employee Staff ID", type: "text", validator:employeeStaffId ,allowInvalid: true},
           {data: "First Name", type: "text", validator:namesValidation ,allowInvalid: true},
           {data: "Second Name", type: "text", validator:min2ifNotEmpty ,allowInvalid: true},
           {data: "Family Name", type: "text", validator:namesValidation ,allowInvalid: true},
           {data: "Relation", type: 'autocomplete', source: ["1= PRINCIPAL","2= SPOUSE","3= CHILD"]},
           {data: "DOB", type: "text",placeholder:'DD/MM/YYYY',className:'dobFormat', validator:acceptableDate ,allowInvalid: true},
           {data: "Gender", type: 'autocomplete', source: ["1= MALE","2= FEMALE"] ,allowInvalid: true},
           {data: "Nationality", type: 'autocomplete', source: nationalities ,allowInvalid: true},
           {data: "Marital Status", type: 'autocomplete', source: ["1= SINGLE","2= MARRIED","3= DIVORCED"], validator:statusValidation ,allowInvalid: true},
           {data: "Cost Sharing", type: 'autocomplete', source: ["CO-NIL","CO-NSSF"] ,allowInvalid: true},
           {data: "Position", type: "text", validator:positionValidation ,allowInvalid: true},
           {data: "Grade", type: "text", validator:gradeValidation ,allowInvalid: true},
           {data: "Mobile No", type: "text", validator:phoneNumberValidation ,allowInvalid: true},
           {data: "E-mail", type: "text", validator:emailValidation ,allowInvalid: true},
        
        ]
        if(cor=='DUBAI' || cor=='DUBAI LSB'){
            colHeaderFromCOR.push(
                "EMIRATES ID NO.",
                "PASSPORT NO.",
                "UID",
                "GDRFAFileNumber",
                "EMIRATE OF VISA ISSUANCE",
                "MEMBER TYPE",
                "ENTITY TYPE",
                "ESTABLISHMENT ID#",
                "RESIDENTIAL LOCATION",
                "WORK LOCATION",
                "EMPLOYEES SALARY BRACKET",
                "COMMISSION",
                "ENTITY CONTACT NUMBER",
                "ENTITY E-MAIL ID")

            columnsFromCOR.push(
                {data: "EMIRATES ID NO.", type: "text", validator:emiratesIdNumber ,allowInvalid: true},
                {data: "PASSPORT NO.", type: "text", validator:passportNumValidation ,allowInvalid: true},
                {data: "UID", type: "text", validator:uidValidation ,allowInvalid: true},
                {data: "GDRFAFileNumber", type: "text", validator:gdrfaFileNumber ,allowInvalid: true},
                {data: "EMIRATE OF VISA ISSUANCE", type: 'autocomplete', source:emirates, validator:notEmpty ,allowInvalid: true},
                {data: "MEMBER TYPE", type: 'autocomplete', source: memberTypes, validator:memberTypesValidation ,allowInvalid: true},
                {data: "ENTITY TYPE", type: 'autocomplete', source: entityTypes, validator:entityTypesValidation ,allowInvalid: true},
                {data: "ESTABLISHMENT ID#", type: 'text', validator:estIdValidation ,allowInvalid: true},
                {data: "RESIDENTIAL LOCATION", type: 'autocomplete', source: residentialLocations, validator:notEmpty ,allowInvalid: true},
                {data: "WORK LOCATION", type: 'autocomplete', source: workLocations, validator:notEmpty ,allowInvalid: true},
                {data: "EMPLOYEES SALARY BRACKET", type: 'autocomplete', source: employeesSalaryBrackets, validator:notEmpty ,allowInvalid: true},
                {data: "COMMISSION", type: 'autocomplete', source: ["Yes","No"], validator:notEmpty ,allowInvalid: true},
                {data: "ENTITY CONTACT NUMBER", type: "text", validator:UAEnumFormat ,allowInvalid: true},
                {data: "ENTITY E-MAIL ID", type: "text", validator:validEmailAndMandatory ,allowInvalid: true})

        }else if(cor=='AUH'){
            colHeaderFromCOR.push(
                "EMIRATES ID NO.",
                "PASSPORT NO.",
                "UID",
                "Has the member been previously insured?")
            columnsFromCOR.push(
                {data: "EMIRATES ID NO.", type: "text", validator:emiratesIdNumber ,allowInvalid: true},
                {data: "PASSPORT NO.", type: "text", validator:passportNumValidation ,allowInvalid: true},
                {data: "UID", type: "text", validator:uidValidation ,allowInvalid: true},
                {data: "Has the member been previously insured?", type: 'autocomplete', source: ["Yes","No"]})
        }else if(cor=='OTHER EMIRATES'){
            colHeaderFromCOR.push(
                "EMIRATES ID NO.",
                "PASSPORT NO.",
                "UID")
            columnsFromCOR.push(
                {data: "EMIRATES ID NO.", type: "text", validator:emiratesIdNumber ,allowInvalid: true},
                {data: "PASSPORT NO.", type: "text", validator:passportNumValidation ,allowInvalid: true},
                {data: "UID", type: "text", validator:uidValidation ,allowInvalid: true},
            )
        }else if(cor=='JORDAN'){
            colHeaderFromCOR.push("NATIONAL ID")
            columnsFromCOR.push(
                {data: "NATIONAL ID", type: "text", validator:nationalIdValidation ,allowInvalid: true})
        }else if(cor=='KSA'){
            colHeaderFromCOR.push(
                "SAUDI ID",
                "IQAMA NO.",
                "IQAMA EXPIRY DATE",
                "SPONSOR ID")
            columnsFromCOR.push(
                {data: "SAUDI ID", type: "text", validator:saudiIdValidation ,allowInvalid: true},
                {data: "IQAMA NO.", type: "text", validator:iqamaIdValidation ,allowInvalid: true},
                {data: "IQAMA EXPIRY DATE", type: "date", validator:iqamaDateValidation ,allowInvalid: true},
                {data: "SPONSOR ID", type: "text", validator:iqamaIdValidation ,allowInvalid: true})
        }else if(cor=='KUWAIT'){
            colHeaderFromCOR.push("KUWAIT (KID)")
            columnsFromCOR.push({data: "KUWAIT (KID)", type: "text", validator:kIdValidation ,allowInvalid: true})
        }else if(cor=='QATAR'){
            colHeaderFromCOR.push("QATAR (QID)")
            columnsFromCOR.push({data: "QATAR (QID)", type: "text", validator:qIdValidation ,allowInvalid: true})
        }
        $.each( policies, function( index, value ) {
            colHeaderFromCOR.push("Policy Id #: "+value.master_policy_clover_id)
            if(value.lob=="GROUP HEALTH"){
                const catInDropDown=categoriesDB.filter(catValue => value.master_policy_clover_id===catValue.master_policy_clover_id).map(catValue => catValue.cat_name)
                columnsFromCOR.push({data: value.master_policy_clover_id,className:'categories', type: 'autocomplete', source: catInDropDown,  validator:categoriesValidation ,allowInvalid: true})

            }else{
                $.each( catBasedOnLimit, function( i, cats ) {
                    if(value.master_policy_clover_id===cats.master_policy_clover_id){
                        columnsFromCOR.push({data: value.master_policy_clover_id, placeholder:'Limit: from '+ cats.limit_from + ' to '+ cats.limit_to, className:'categories', type: 'text', validator:categoriesValidation ,allowInvalid: true})
                    }
                })    
            }
        });
        const policiesLength=policies.length
        var allDataArray=[]
        var container = document.getElementById('hotContainer');
        var lastChange = null;
        var validColsArray=[]
        var hot = new Handsontable(container, {
            data: [dataToInsert],
            colHeaders: colHeaderFromCOR,
            columns: columnsFromCOR,
            minSpareRows: 6,
            rowHeaders: false,
            columnSorting: true,
            manualRowMove: true,
            width: "100%",
            height: 300,
            colWidths: 250,
            manualColumnResize: true,
            afterValidate: function(isValid, value, row, prop, source){
                if(source=="validateCells"){
                    allDataArray.push({row:row,cells:{isValid:isValid,prop:prop, value:value,colIndex:hot.propToCol(prop)}})
                }
                if (row >= hot.countRows() - hot.getSettings().minSpareRows)
		            return true;
            }
        });
        
        hot.addHook('afterChange', function(change, source) {
            validLimits=""
            // $.each( catBasedOnLimit, function( i, cats ) {
            // change.forEach(function(e){
            //     console.log(e)
            //     if(e[1]===cats['master_policy_clover_id']){
            //         const limit_from=cats.limit_from
            //         const limit_to=cats.limit_to
            //         if(e[3]>=limit_from && e[3]>=limit_to){
            //             validLimits = "Policy #: "+ e[1] +" should be between "+ limit_from +" and "+ limit_to
            //         }
            //     }
            // })
        
            // })  
            
            var tableData = hot.getData();
            var tableRow = tableData.length-1;
            nationalityValue=hot.getDataAtCell(change[0][0],9)
            ageValue=hot.getDataAtCell(change[0][0],7)
            gdrfaValue=hot.getDataAtCell(change[0][0],19)
            uaeVisaIssuanceValue=hot.getDataAtCell(change[0][0],20)
            memberTypeValue=hot.getDataAtCell(change[0][0],21)
            entityTypeValue=hot.getDataAtCell(change[0][0],22)
            if(change[0][1]=="Relation"){
                if(relationValue=="1= PRINCIPAL"){
                    hot.setCellMeta(change[0][0],12, 'readOnly', false)
                    hot.setCellMeta(change[0][0],13, 'readOnly', false)
                    hot.setCellMeta(change[0][0],12, 'className', "")
                    hot.setCellMeta(change[0][0],13, 'className', "")
                    hot.setDataAtCell(change[0][0],12,"");
                    hot.setDataAtCell(change[0][0],13,"");
                }else{
                    hot.setCellMeta(change[0][0],12, 'readOnly', true)
                    hot.setCellMeta(change[0][0],13, 'readOnly', true)
                    hot.setCellMeta(change[0][0],12, 'className', "htDisabled")
                    hot.setCellMeta(change[0][0],13, 'className', "htDisabled")
                    hot.setDataAtCell(change[0][0],12,"");
                    hot.setDataAtCell(change[0][0],13,"");
                }
            }
            $("#step1Submit").fadeIn();
        });
        var exportPlugin = hot.getPlugin('exportFile');
        
        downloadCsv.addEventListener('click', function() {
            exportPlugin.downloadFile('csv', {
            columnHeaders: true,        // default false, exports the column headers
            exportHiddenRows: true,
            filename: 'Add a member in '+cor+' [DD]-[MM]-[YYYY]'
            });
        });
        hot.addHook('beforeValidate', function(val, row, prop) {
            emptyRow=hot.isEmptyRow(row)
            var currentColIndex=hot.propToCol(prop)
            var currentCellValue=hot.getDataAtCell(row,currentColIndex)
            rowMetaData=hot.getDataAtRow(row)
            relationValue=hot.getDataAtCell(row,6)
        });
        Handsontable.dom.addEvent(document.getElementById('step1Submit'), 'click', async function() {
            //.step1Modal .spinner-border .modal-content
            //$(".modal-footer").html("<div class='spinner-border text-primary' role='status'><span class='sr-only'>Loading...</span></div>")
            var newArray = [];
            var oldRow=0
            allDataArray.length=0
            let validEntries=[]
            let invalidEntries=[]
            let validRowsIndexes=[]
            
            //if(validLimits==""){
            hot.validateCells(function(hotIsValid) {
                allDataArray.forEach(item => {
                    var newItem = [];
                    allDataArray.forEach(innerItem => {
                        if(innerItem.row == item.row){
                            newItem = newItem.concat(innerItem.cells);
                        }
                    });
                    if(oldRow!=item.row){
                        newArray.push(newItem);
                        oldRow=item.row
                    }
                });
                let allFilledRows = newArray.slice(6).reverse()
                allFilledRows.forEach((filledRow,index) => {
                    var p=filledRow.map((valid) =>  valid.isValid).indexOf(false);
                    if(p<0){
                        validEntries.push(filledRow)
                        validRowsIndexes.push(index)
                    }else{
                        invalidEntries.push(filledRow)
                    }
                })
                $(".step1Modal .spinner-border").hide().siblings("h5").removeClass("d-none")
                $(".step1Modal .modal-footer").removeClass("d-none")
            })
            $('#proceedConfirmation').modal()
            // }else{
            //     alert(validLimits)
            // }
        })
        Handsontable.dom.addEvent(document.getElementById('proceedToStep2'), 'click', async function() {
                $('#proceedConfirmation').modal('hide')
            var newArray = [];
            var oldRow=0
            allDataArray.length=0
            let validEntries=[]
            let invalidEntries=[]
            let validRowsIndexes=[]
            
            hot.validateCells(function(hotIsValid) {
                allDataArray.forEach(item => {
                    var newItem = [];
                    allDataArray.forEach(innerItem => {
                        if(innerItem.row == item.row){
                            newItem = newItem.concat(innerItem.cells);
                        }
                    });
                    if(oldRow!=item.row){
                        newArray.push(newItem);
                        oldRow=item.row
                    }
                });
                let allFilledRows = newArray.slice(6).reverse()
                allFilledRows.forEach((filledRow,index) => {
                    var p=filledRow.map((valid) =>  valid.isValid).indexOf(false);
                    if(p<0){
                        
                        validEntries.push(filledRow)
                        validRowsIndexes.push(index)
                    }else{
                        invalidEntries.push(filledRow)
                    }
                })
            })
            setTimeout(function(){
                var tableData = hot.getData();
                var tableHeader = hot.getColHeader();
                var dataArray={master_account:master_account,cor:cor,web_req_id:webReqId,validEntries:validEntries,invalidEntries:invalidEntries,dataDB:[],dataCategories:[],validRowsIndexes:validRowsIndexes};
                var addHealthTempId=0;
                    const arrayCount=tableData.length-6;
                    tableData.forEach(function(updatedData,rowIndex){
                        var d = new Date();
                        var month = d.getMonth()+1;
                        var day = d.getDate();
                        var outputDate = d.getFullYear() + '/' + (month<10 ? '0' : '') + month + '/' + (day<10 ? '0' : '') + day;
                        if(rowIndex < arrayCount){
                            addHealthTempId++;
                            var categoriesArray=updatedData.slice(Math.max(updatedData.length - policiesLength, 0))
                            var tableHeaderArray=tableHeader.slice(Math.max(updatedData.length - policiesLength, 0))

                            finalValidData = {
                                company_name: updatedData[0],
                                s_department: updatedData[1],
                                employee_staff_id: updatedData[2],
                                first_name: updatedData[3],
                                second_name: updatedData[4],
                                last_name: updatedData[5],
                                relation: updatedData[6],
                                dob: updatedData[7],
                                gender: updatedData[8],
                                nationality: updatedData[9],
                                marital_status: updatedData[10],
                                cost_sharing: updatedData[11],
                                position: updatedData[12],
                                grade: updatedData[13],
                                mobile: updatedData[14],
                                email: updatedData[15],
                                client_contact_name: contact.client_contact_name,
                                client_contact_id: client_contact_id,
                                master_account: master_account,
                                cor: cor,
                                web_req_id:webReqId,
                                Add_health_temp_id:addHealthTempId,
                                date:outputDate
                            }
                            if(cor=='DUBAI LSB' || cor=='DUBAI'){
                                finalValidData = {...finalValidData, ...{
                                    emirates_id: updatedData[16],
                                    passport_num: updatedData[17],
                                    uid: updatedData[18],
                                    gdrfa_file_number: updatedData[19],
                                    emirate_of_visa_issuance: updatedData[20],
                                    member_type: updatedData[21],
                                    entity_type: updatedData[22],
                                    establishment_id: updatedData[23],
                                    residential_location: updatedData[24],
                                    work_location: updatedData[25],
                                    employees_salary_bracket: updatedData[26],
                                    commission: updatedData[27],
                                    entity_contact_number: updatedData[28],
                                    entity_email_id: updatedData[29]
                                }}
                            }else if(cor=='AUH'){
                                    finalValidData = {...finalValidData, ...{
                                    emirates_id: updatedData[16],
                                    passport_num: updatedData[17],
                                    uid: updatedData[18],
                                    previously_insured: updatedData[19]
                                }}
                                }else if(cor=='OTHER EMIRATES'){
                                finalValidData = {...finalValidData, ...{
                                    emirates_id: updatedData[16],
                                    passport_num: updatedData[17],
                                    uid: updatedData[18]
                                }}
                            }else if(cor=='JORDAN'){
                                finalValidData = {...finalValidData, ...{
                                    national_id: updatedData[16]
                                }}
                            }else if(cor=='KSA'){
                                finalValidData = {...finalValidData, ...{
                                    saudi_id: updatedData[16],
                                    iqama_id: updatedData[17],
                                    iqama_expire_at: updatedData[18],
                                    sponsor_id: updatedData[19]
                                }}
                            }else if(cor=='KUWAIT'){
                                finalValidData = {...finalValidData, ...{
                                    kuwait_id : updatedData[16]
                                }}
                            }else if(cor=='QATAR'){
                                finalValidData = {...finalValidData, ...{
                                    qatar_id: updatedData[16]
                                }}
                            }
                            dataArray.dataDB.push(finalValidData)

                            tableHeaderArray.forEach(function(headerCont,index){
                                var category=categoriesArray[index]
                                dataArray.dataCategories.push({policy_id: headerCont,cat: category,web_req_id:webReqId,Add_health_temp_id:addHealthTempId})
                            })
                        }
                    })
                const HOTcols=JSON.stringify(columnsFromCOR)
                $.ajax({
                    url: "{{ route('addAMember2') }}",
                    type: "post",
                    data:  {data:{dataArray,HOTcols}},
                    success: function (res) {
                        $("#smartwizard-arrows-primary").smartWizard("next");
                        $(".content-step-2").html(res)
                    },
                    error: function(xhr, status, error) {
                        alert('Something went wrong')
                        console.log(xhr.responseText);
                    }
                });
            }, 1000);
        })
        $(".dateFormat").each(function () {
            var dateNewFormat=moment($(this).text(),"MMM DD YYYY hh:mm a").format("DD MMM YYYY")
            if(dateNewFormat=="Invalid date") dateNewFormat=moment($(this).text()).format("DD MMM YYYY")
            $(this).text((dateNewFormat==="Invalid date") ? "-" : dateNewFormat)
        });
    })
    
</script>